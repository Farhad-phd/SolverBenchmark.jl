using Base.Threads
using DataFrames

export bmark_solvers
"""
    bmark_solvers(solvers :: Dict{Symbol, <:Any}, problem_list; threads_enable=false, kwargs...)

Run a set of solvers on a set of problems. If `threads_enable` is set to true and the number of Julia threads is greater than 1, 
the solvers will be run in parallel using `Threads.@threads`.

Note: The `@threads` macro requires that the number of threads be set before the Julia process starts, using the `-t` or `--threads`
command-line argument, or the `JULIA_NUM_THREADS` environment variable.

#### Arguments
* `solvers`: A dictionary where each key is a solver name and each value is an instance of the solver to be run.
* `problem_list`: A list of problems to be solved by each solver.

#### Keyword arguments
* `threads_enable`: A boolean indicating whether to enable multithreading. Default is `false`.
* Other keyword arguments accepted by `solve_problems`.

#### Return value
A `Dict{Symbol, DataFrame}` of statistics generated by each solver.
"""

function bmark_solvers(solvers::Dict{Symbol, <:Any}, problem_list; threads_enable=false)
  stats = Dict{Symbol, DataFrame}()
  
  if threads_enable
      @info "Running with multithreading enabled"
      Threads.@threads for i in 1:length(solvers)
          name = keys(solvers)[i]
          solver = solvers[name]
          @info "Running solver $name on thread $(Threads.threadid())"
          stats[name] = solve_problems(solver, name, problem_list)
      end
  else
      for (name, solver) in solvers
          @info "Running solver $name"
          stats[name] = solve_problems(solver, name, problem_list)
      end
  end
  
  return stats
end


"""
    bmark_solvers_parallel(solvers :: Dict{Symbol, Any}, args...; kwargs...)

Run a set of solvers on a set of problems in parallel.

#### Arguments
* `solvers`: a dictionary of solvers to which each problem should be passed.
* `args...`: other positional arguments accepted by `solve_problems`, except for a solver name.

#### Keyword arguments
Any keyword argument accepted by `solve_problems`.

#### Return value
A `Dict{Symbol, DataFrame}` of execution statistics, with each solver's results stored under its corresponding key.
"""


function bmark_solvers_parallel(solvers::Dict{Symbol, <:Any}, args...; kwargs...)
  stats = Dict{Symbol, DataFrame}()

  # Collect solvers in a vector so we can iterate them in parallel
  solver_keys = collect(keys(solvers))
  
  @threads for i in 1:length(solver_keys)
      name = solver_keys[i]
      solver = solvers[name]
      @info "running solver $name on thread $(threadid())"
      stats[name] = solve_problems(solver, name, args...; kwargs...)
  end
  return stats
end
